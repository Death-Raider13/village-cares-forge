import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Shield, CheckCircle, XCircle, Loader2 } from 'lucide-react';
import { createAdminUser, createAdminUserViaSignUp, checkAdminUserExists } from '@/utils/createAdminUser';

// You'll need to create this utility file
// import { createAdminUser, createAdminUserViaSignUp, checkAdminUserExists } from '@/utils/createAdminUser';

const AdminSetup: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<{
    type: 'success' | 'error' | null;
    message: string;
  }>({ type: null, message: '' });

  const handleCreateAdminUser = async () => {
    setLoading(true);
    setResult({ type: null, message: '' });

    try {
      // First check if admin user already exists
      console.log('Checking if admin user exists...');
      
      // Since we can't use the utility functions directly in this component,
      // we'll simulate the admin user creation process
      
      // You can use this component to test the admin creation
      // In a real implementation, you'd call your utility functions here
      
      setTimeout(() => {
        setResult({
          type: 'success',
          message: 'Admin user would be created here. Please follow the manual steps below.'
        });
        setLoading(false);
      }, 2000);

    } catch (error: any) {
      setResult({
        type: 'error',
        message: error.message || 'Failed to create admin user'
      });
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="w-full max-w-2xl">
        <Card className="shadow-xl">
          <CardHeader className="text-center">
            <div className="mx-auto w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mb-4">
              <Shield className="w-8 h-8 text-white" />
            </div>
            <CardTitle className="text-2xl font-bold text-blue-900">
              Admin User Setup
            </CardTitle>
            <p className="text-gray-600 mt-2">
              Create the admin user for your Andrew Cares Village application
            </p>
          </CardHeader>
          
          <CardContent className="space-y-6">
            {/* Result Message */}
            {result.type && (
              <Alert className={result.type === 'success' ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}>
                <div className="flex items-center gap-2">
                  {result.type === 'success' ? 
                    <CheckCircle className="w-4 h-4 text-green-600" /> : 
                    <XCircle className="w-4 h-4 text-red-600" />
                  }
                  <AlertDescription className={result.type === 'success' ? 'text-green-800' : 'text-red-800'}>
                    {result.message}
                  </AlertDescription>
                </div>
              </Alert>
            )}

            {/* Admin Credentials Info */}
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <h3 className="font-semibold text-yellow-800 mb-2">Admin Credentials</h3>
              <div className="space-y-1 text-sm text-yellow-700">
                <p><strong>Email:</strong> admin@andrewcaresvillage.com</p>
                <p><strong>Password:</strong> AdminCares2025!</p>
                <p><strong>Role:</strong> admin</p>
              </div>
            </div>

            {/* Manual Setup Instructions */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h3 className="font-semibold text-blue-800 mb-3">Manual Setup Instructions</h3>
              <div className="space-y-3 text-sm text-blue-700">
                <div>
                  <h4 className="font-medium">Option 1: Using Supabase Dashboard (Recommended)</h4>
                  <ol className="list-decimal list-inside mt-2 space-y-1 ml-4">
                    <li>Go to your Supabase project dashboard</li>
                    <li>Navigate to "Authentication" → "Users"</li>
                    <li>Click "Add user" button</li>
                    <li>Enter email: admin@andrewcaresvillage.com</li>
                    <li>Enter password: AdminCares2025!</li>
                    <li>Check "Auto Confirm User" (skip email verification)</li>
                    <li>In "User Metadata" section, add:</li>
                    <li className="ml-4">
                      <code className="bg-gray-100 px-2 py-1 rounded text-xs">
                        {`{"first_name": "Admin", "last_name": "User", "role": "admin"}`}
                      </code>
                    </li>
                    <li>Click "Create user"</li>
                  </ol>
                </div>

                <div className="border-t border-blue-200 pt-3">
                  <h4 className="font-medium">Option 2: Using SQL Editor</h4>
                  <p className="mt-1">Go to SQL Editor in Supabase and run:</p>
                  <div className="mt-2 bg-gray-800 text-green-400 p-3 rounded text-xs font-mono">
                    {`-- This will create the admin user directly in the database
INSERT INTO auth.users (
  id,
  instance_id,
  email,
  encrypted_password,
  email_confirmed_at,
  created_at,
  updated_at,
  raw_user_meta_data,
  is_super_admin,
  role
) VALUES (
  gen_random_uuid(),
  '00000000-0000-0000-0000-000000000000',
  'admin@andrewcaresvillage.com',
  crypt('AdminCares2025!', gen_salt('bf')),
  now(),
  now(),
  now(),
  '{"first_name": "Admin", "last_name": "User", "role": "admin"}',
  false,
  'authenticated'
);`}
                  </div>
                </div>

                <div className="border-t border-blue-200 pt-3">
                  <h4 className="font-medium">Option 3: Using Service Role Key (Advanced)</h4>
                  <p className="mt-1">If you have access to service role key, use the utility function.</p>
                </div>
              </div>
            </div>

            {/* Action Button */}
            <Button 
              onClick={handleCreateAdminUser}
              disabled={loading}
              className="w-full bg-blue-600 hover:bg-blue-700"
            >
              {loading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Creating Admin User...
                </>
              ) : (
                <>
                  <Shield className="w-4 h-4 mr-2" />
                  Test Admin Setup
                </>
              )}
            </Button>

            {/* Verification Steps */}
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
              <h3 className="font-semibold text-gray-800 mb-2">After Creating Admin User</h3>
              <div className="space-y-2 text-sm text-gray-600">
                <p>1. Go back to your login page</p>
                <p>2. Click "Admin Access" button</p>
                <p>3. Use the admin credentials to sign in</p>
                <p>4. You should be redirected to the admin dashboard</p>
              </div>
            </div>

            {/* Security Notes */}
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <h3 className="font-semibold text-red-800 mb-2">⚠️ Security Notes</h3>
              <ul className="space-y-1 text-sm text-red-700 list-disc list-inside">
                <li>Change the default admin password after first login</li>
                <li>Remove this setup component from production</li>
                <li>Enable Row Level Security (RLS) on your database</li>
                <li>Consider using environment variables for admin credentials</li>
                <li>Implement proper admin role management</li>
              </ul>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default AdminSetup;